{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ahmed\\\\Documents\\\\mern-expense-app\\\\client\\\\src\\\\components\\\\AddForm.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport { saveExpense, resetSaved, fetchExpense } from '../actions';\nimport { FloatButton, FormBody } from '../components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction useDidUpdate(callback) {\n  _s();\n\n  const hasMount = useRef(false);\n  useEffect(() => {\n    if (hasMount.current) {\n      callback();\n    } else {\n      hasMount.current = true;\n    }\n  });\n}\n\n_s(useDidUpdate, \"xkQfLb2STfY6p2HrBpLBC/QkeUE=\");\n\nfunction AddFormComponent(props) {\n  _s2();\n\n  const [modal, setModal] = useState(false);\n  const formRef = useRef();\n  useDidUpdate(() => {\n    const {\n      saved,\n      error,\n      resetSaved,\n      fetchExpense\n    } = props;\n\n    if (!error) {\n      formRef.current.setSubmitting(false);\n    }\n\n    if (saved && modal) {\n      toggle();\n      fetchExpense(props.selected);\n      resetSaved();\n      formRef.current.resetForm();\n    }\n  });\n\n  function submit(values) {\n    props.saveExpense(values);\n  }\n\n  const toggle = () => setModal(!modal);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FloatButton, {\n      onClick: toggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modal,\n      toggle: toggle,\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        toggle: toggle,\n        children: \"Add expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        children: /*#__PURE__*/_jsxDEV(FormBody, {\n          onSubmit: submit,\n          formRef: formRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(AddFormComponent, \"Mb19hkT2zCPJzfcn1aVbVuoLgAE=\", false, function () {\n  return [useDidUpdate];\n});\n\n_c = AddFormComponent;\n\nconst mapStateToProps = ({\n  expense,\n  errors\n}) => {\n  return {\n    saved: expense.saved,\n    error: errors.message\n  };\n};\n\nconst AddForm = connect(mapStateToProps, {\n  saveExpense,\n  resetSaved,\n  fetchExpense\n})(AddFormComponent);\nexport { AddForm };\n\nvar _c;\n\n$RefreshReg$(_c, \"AddFormComponent\");","map":{"version":3,"sources":["C:/Users/ahmed/Documents/mern-expense-app/client/src/components/AddForm.js"],"names":["React","useState","useEffect","useRef","connect","Modal","ModalHeader","ModalBody","saveExpense","resetSaved","fetchExpense","FloatButton","FormBody","useDidUpdate","callback","hasMount","current","AddFormComponent","props","modal","setModal","formRef","saved","error","setSubmitting","toggle","selected","resetForm","submit","values","mapStateToProps","expense","errors","message","AddForm"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,EAAgBC,WAAhB,EAA6BC,SAA7B,QAA8C,YAA9C;AAGA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,YAAlC,QAAsD,YAAtD;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,eAAtC;;;AAGA,SAASC,YAAT,CAAsBC,QAAtB,EAAgC;AAAA;;AAC5B,QAAMC,QAAQ,GAAGZ,MAAM,CAAC,KAAD,CAAvB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIa,QAAQ,CAACC,OAAb,EAAsB;AAClBF,MAAAA,QAAQ;AACX,KAFD,MAEO;AACHC,MAAAA,QAAQ,CAACC,OAAT,GAAmB,IAAnB;AACH;AACJ,GANQ,CAAT;AAOH;;GATQH,Y;;AAWT,SAASI,gBAAT,CAA0BC,KAA1B,EAAiC;AAAA;;AAE7B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAMoB,OAAO,GAAGlB,MAAM,EAAtB;AAEAU,EAAAA,YAAY,CAAC,MAAM;AACf,UAAM;AAAES,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBd,MAAAA,UAAhB;AAA4BC,MAAAA;AAA5B,QAA6CQ,KAAnD;;AACA,QAAI,CAACK,KAAL,EAAY;AAERF,MAAAA,OAAO,CAACL,OAAR,CAAgBQ,aAAhB,CAA8B,KAA9B;AACH;;AACD,QAAIF,KAAK,IAAIH,KAAb,EAAoB;AAChBM,MAAAA,MAAM;AACNf,MAAAA,YAAY,CAACQ,KAAK,CAACQ,QAAP,CAAZ;AACAjB,MAAAA,UAAU;AACVY,MAAAA,OAAO,CAACL,OAAR,CAAgBW,SAAhB;AAEH;AACJ,GAbW,CAAZ;;AAcA,WAASC,MAAT,CAAgBC,MAAhB,EAAwB;AACpBX,IAAAA,KAAK,CAACV,WAAN,CAAkBqB,MAAlB;AACH;;AAED,QAAMJ,MAAM,GAAG,MAAML,QAAQ,CAAC,CAACD,KAAF,CAA7B;;AACA,sBACI;AAAA,4BACI,QAAC,WAAD;AAAa,MAAA,OAAO,EAAEM;AAAtB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,KAAD;AAAO,MAAA,MAAM,EAAEN,KAAf;AAAsB,MAAA,MAAM,EAAEM,MAA9B;AAAA,8BACI,QAAC,WAAD;AAAa,QAAA,MAAM,EAAEA,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,SAAD;AAAA,+BACA,QAAC,QAAD;AAAU,UAAA,QAAQ,EAAEG,MAApB;AAA4B,UAAA,OAAO,EAAEP;AAArC;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH;;IArCQJ,gB;UAKLJ,Y;;;KALKI,gB;;AAsCT,MAAMa,eAAe,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAAyB;AAC7C,SAAO;AACHV,IAAAA,KAAK,EAAES,OAAO,CAACT,KADZ;AAEHC,IAAAA,KAAK,EAAES,MAAM,CAACC;AAFX,GAAP;AAIH,CALD;;AAOA,MAAMC,OAAO,GAAG9B,OAAO,CAAC0B,eAAD,EACnB;AAAEtB,EAAAA,WAAF;AAAeC,EAAAA,UAAf;AAA2BC,EAAAA;AAA3B,CADmB,CAAP,CAC+BO,gBAD/B,CAAhB;AAEA,SAASiB,OAAT","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\r\n\r\n\r\nimport { saveExpense, resetSaved, fetchExpense } from '../actions'\r\nimport { FloatButton, FormBody } from '../components';\r\n\r\n\r\nfunction useDidUpdate(callback) {\r\n    const hasMount = useRef(false)\r\n    useEffect(() => {\r\n        if (hasMount.current) {\r\n            callback()\r\n        } else {\r\n            hasMount.current = true\r\n        }\r\n    })\r\n}\r\n\r\nfunction AddFormComponent(props) {\r\n\r\n    const [modal, setModal] = useState(false)\r\n    const formRef = useRef()\r\n\r\n    useDidUpdate(() => {\r\n        const { saved, error, resetSaved, fetchExpense } = props\r\n        if (!error) {\r\n            \r\n            formRef.current.setSubmitting(false)\r\n        }\r\n        if (saved && modal) {\r\n            toggle()\r\n            fetchExpense(props.selected)\r\n            resetSaved()\r\n            formRef.current.resetForm()\r\n\r\n        }\r\n    })\r\n    function submit(values) {\r\n        props.saveExpense(values)\r\n    }\r\n\r\n    const toggle = () => setModal(!modal)\r\n    return (\r\n        <div>\r\n            <FloatButton onClick={toggle} />\r\n            <Modal isOpen={modal} toggle={toggle}>\r\n                <ModalHeader toggle={toggle}>Add expense</ModalHeader>\r\n                <ModalBody>\r\n                <FormBody onSubmit={submit} formRef={formRef}/>\r\n                   \r\n                </ModalBody>\r\n            </Modal>\r\n        </div>\r\n\r\n    )\r\n}\r\nconst mapStateToProps = ({ expense, errors }) => {\r\n    return {\r\n        saved: expense.saved,\r\n        error: errors.message\r\n    }\r\n}\r\n\r\nconst AddForm = connect(mapStateToProps, \r\n    { saveExpense, resetSaved, fetchExpense })(AddFormComponent)\r\nexport { AddForm }"]},"metadata":{},"sourceType":"module"}